name: Playwright Tests with Metrics
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shard: [1, 2]
      fail-fast: false
    
    env:
      GRAFANA_URL: http://grafana:3000
      METRICS_PORT: 9323
      PLAYWRIGHT_METRICS: true

    steps:
    - uses: actions/checkout@v4

    - name: Create Docker network
      run: docker network create monitoring-network
      timeout-minutes: 2

    - name: Setup Prometheus
      run: |
        mkdir -p prometheus
        cat > prometheus/prometheus.yml <<EOF
        global:
          scrape_interval: 15s
        scrape_configs:
          - job_name: 'playwright-tests'
            static_configs:
              - targets: ['localhost:9323']
        EOF
        docker run -d \
          --name prometheus \
          --network monitoring-network \
          -p 9090:9090 \
          -v ${{ github.workspace }}/prometheus:/etc/prometheus \
          prom/prometheus
      timeout-minutes: 5

    - name: Setup Grafana
      run: |
        docker run -d \
          --name grafana \
          --network monitoring-network \
          -p 3000:3000 \
          -e "GF_AUTH_ANONYMOUS_ENABLED=true" \
          -e "GF_AUTH_ANONYMOUS_ORG_ROLE=Admin" \
          -e "GF_AUTH_API_KEY=${{ secrets.GRAFANA_API_KEY }}" \
          grafana/grafana
      timeout-minutes: 5

    - name: Configure Grafana Datasource and Dashboard
      run: |
        # Wait for Grafana to be ready
        timeout=60
        while ! curl -s http://localhost:3000/api/health | grep -q "ok"; do
          if [ $timeout -le 0 ]; then
            echo "Timeout waiting for Grafana"
            exit 1
          fi
          echo "Waiting for Grafana to be ready... ($timeout seconds left)"
          sleep 5
          timeout=$((timeout - 5))
        done

        # Add Prometheus as datasource with retry
        max_retries=3
        retry_count=0
        while [ $retry_count -lt $max_retries ]; do
          if curl -X POST http://localhost:3000/api/datasources \
            -H "Content-Type: application/json" \
            --data-binary '{
              "name": "Prometheus",
              "type": "prometheus",
              "url": "http://prometheus:9090",
              "access": "proxy",
              "isDefault": true
            }'; then
            echo "Datasource added successfully"
            break
          fi
          retry_count=$((retry_count + 1))
          if [ $retry_count -lt $max_retries ]; then
            echo "Retrying in 5 seconds..."
            sleep 5
          else
            echo "Failed to add datasource after $max_retries attempts"
            exit 1
          fi
        done
      timeout-minutes: 5

    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      timeout-minutes: 5
      
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
      timeout-minutes: 10
      
    - name: Run Playwright tests with metrics and monitoring
      id: run-tests
      continue-on-error: true
      run: |
        # Start the container and keep it running
        docker run -d \
          --name test-runner \
          --network monitoring-network \
          -v ${{ github.workspace }}:/app \
          -w /app \
          -e METRICS_PORT=9323 \
          -e GRAFANA_API_KEY=${{ secrets.GRAFANA_API_KEY }} \
          -e GRAFANA_URL=${{ env.GRAFANA_URL }} \
          -e PLAYWRIGHT_METRICS=${{ env.PLAYWRIGHT_METRICS }} \
          -p 9323:9323 \
          node:lts \
          tail -f /dev/null

        # Run tests and post-test tasks with sharding
        docker exec test-runner npm install
        docker exec test-runner npx playwright install --with-deps
        docker exec test-runner npx playwright test --shard=${{ matrix.shard }}/2
        docker exec test-runner npm run post:test
        docker exec test-runner npm run upload:dashboard
        
        # Stop the container
        docker stop test-runner
        docker rm test-runner
      timeout-minutes: 30
      
    - name: Check Prometheus targets
      if: always()
      run: curl -s http://localhost:9090/api/v1/targets | jq .
      timeout-minutes: 2
        
    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-shard-${{ matrix.shard }}
        path: |
          my-report/
          playwright-report/
          test-results/
        retention-days: 1
        if-no-files-found: warn

    - name: Merge test results
      if: always() && matrix.shard == 2
      run: |
        npx playwright merge-reports ./playwright-report

    - name: Check test results
      if: steps.run-tests.outcome == 'failure'
      run: exit 1
