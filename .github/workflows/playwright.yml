name: Playwright Tests with Metrics
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

# Add permissions for GitHub token
permissions:
  contents: write

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Define the number of shards you want to use (e.g., 3 shards)
        shard: [1, 2]
    
    env:
      GRAFANA_URL: http://grafana:3000
      METRICS_PORT: 9090
      PLAYWRIGHT_METRICS: true
      SMTP_HOST: ${{ secrets.SMTP_HOST }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
      SMTP_USER: ${{ secrets.SMTP_USER }}
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      SMTP_FROM: ${{ secrets.SMTP_FROM }}
      SMTP_TO: ${{ secrets.SMTP_TO }}
      GF_SECURITY_ADMIN_USER: ${{ secrets.GF_SECURITY_ADMIN_USER }}
      GF_SECURITY_ADMIN_PASSWORD: ${{ secrets.GF_SECURITY_ADMIN_PASSWORD }}
      GF_SMTP_PASSWORD: ${{ secrets.GF_SMTP_PASSWORD }}
      ALERTMANAGER_EMAIL_PASSWORD: ${{ secrets.ALERTMANAGER_EMAIL_PASSWORD }}
      GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}
      SMTP_FROM_NAME: "Playwright Test Monitor"
      PLAYWRIGHT_VERSION: 1.52.0
      # Base port for metrics
      METRICS_PORT_BASE: 9323

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set metrics port
      id: set-port
      run: echo "SHARD_METRICS_PORT=$((${{ env.METRICS_PORT_BASE }} + ${{ matrix.shard }}))" >> $GITHUB_ENV

    - name: Create Docker network
      run: docker network create monitoring-network
      timeout-minutes: 2

    - name: Setup Prometheus
      run: |
        mkdir -p prometheus
        cat > prometheus/prometheus.yml <<EOF
        global:
          scrape_interval: 15s
        scrape_configs:
          - job_name: 'playwright-tests-shard-${{ matrix.shard }}'
            static_configs:
              - targets: ['localhost:${{env.SHARD_METRICS_PORT }}']
        EOF
        docker run -d \
          --name prometheus \
          --network monitoring-network \
          -p 9090:9090 \
          -v ${{ github.workspace }}/prometheus:/etc/prometheus \
          prom/prometheus
      timeout-minutes: 5

    - name: Setup Grafana
      run: |
        docker run -d \
          --name grafana \
          --network monitoring-network \
          -p 3000:3000 \
          -e "GF_AUTH_ANONYMOUS_ENABLED=true" \
          -e "GF_AUTH_ANONYMOUS_ORG_ROLE=Admin" \
          -e "GF_AUTH_API_KEY=${{ secrets.GRAFANA_API_KEY }}" \
          -e "GF_SECURITY_ADMIN_USER=${{ secrets.GF_SECURITY_ADMIN_USER }}" \
          -e "GF_SECURITY_ADMIN_PASSWORD=${{ secrets.GF_SECURITY_ADMIN_PASSWORD }}" \
          -e "GF_SMTP_ENABLED=true" \
          -e "GF_SMTP_HOST=${{ secrets.SMTP_HOST }}" \
          -e "GF_SMTP_USER=${{ secrets.SMTP_USER }}" \
          -e "GF_SMTP_PASSWORD=${{ secrets.GF_SMTP_PASSWORD }}" \
          -e "GF_SMTP_FROM_ADDRESS=${{ secrets.SMTP_FROM }}" \
          -e "GF_SMTP_FROM_NAME=${{ env.SMTP_FROM_NAME }}" \
          grafana/grafana:latest
      timeout-minutes: 5

    - name: Setup AlertManager
      run: |
        docker run -d \
          --name alertmanager \
          --network monitoring-network \
          -p 9093:9093 \
          -e SMTP_HOST=${{ secrets.SMTP_HOST }} \
          -e SMTP_PORT=${{ secrets.SMTP_PORT }} \
          -e SMTP_USER=${{ secrets.SMTP_USER }} \
          -e SMTP_FROM=${{ secrets.SMTP_FROM }} \
          -e SMTP_TO=${{ secrets.SMTP_TO }} \
          -e ALERTMANAGER_EMAIL_PASSWORD=${{ secrets.ALERTMANAGER_EMAIL_PASSWORD }} \
          -v ${{ github.workspace }}/alertmanager:/etc/alertmanager \
          prom/alertmanager:latest \
          --config.file=/etc/alertmanager/alertmanager.yml
      timeout-minutes: 5

    - name: Configure Grafana Datasource and Dashboard
      run: |
        # Wait for Grafana to be ready
        timeout=60
        while ! curl -s http://localhost:3000/api/health | grep -q "ok"; do
          if [ $timeout -le 0 ]; then
            echo "Timeout waiting for Grafana"
            exit 1
          fi
          echo "Waiting for Grafana to be ready... ($timeout seconds left)"
          sleep 5
          timeout=$((timeout - 5))
        done

        # Add Prometheus as datasource with retry
        max_retries=3
        retry_count=0
        while [ $retry_count -lt $max_retries ]; do
          if curl -X POST http://localhost:3000/api/datasources \
            -H "Content-Type: application/json" \
            --data-binary '{
              "name": "Prometheus",
              "type": "prometheus",
              "url": "http://prometheus:9090",
              "access": "proxy",
              "isDefault": true
            }'; then
            echo "Datasource added successfully"
            break
          fi
          retry_count=$((retry_count + 1))
          if [ $retry_count -lt $max_retries ]; then
            echo "Retrying in 5 seconds..."
            sleep 5
          else
            echo "Failed to add datasource after $max_retries attempts"
            exit 1
          fi
        done
      timeout-minutes: 5

    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
        cache: 'npm'
    
    - name: Get npm cache directory
      id: npm-cache-dir
      shell: bash
      run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
      
    - name: Setup npm cache
      uses: actions/cache@v3
      id: npm-cache
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Setup Playwright cache
      uses: actions/cache@v3
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
    
    - name: Install dependencies
      run: npm ci
      timeout-minutes: 5
      
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
      
    - name: List tests for better sharding
      id: list-tests
      run: |
        # List all test files to help with debugging test distribution
        echo "Available test files:"
        npx playwright list-files
      timeout-minutes: 1

    - name: Run Playwright tests with metrics and monitoring
      id: run-tests
      continue-on-error: true
      run: |
        # Set up environment variables for Playwright
        export METRICS_PORT=${{ env.SHARD_METRICS_PORT }}
        export GRAFANA_API_KEY=${{ secrets.GRAFANA_API_KEY }}
        export GRAFANA_URL=${{ env.GRAFANA_URL }}
        export PLAYWRIGHT_METRICS=${{ env.PLAYWRIGHT_METRICS }}
        export SMTP_HOST=${{ secrets.SMTP_HOST }}
        export SMTP_PORT=${{ secrets.SMTP_PORT }}
        export SMTP_USER=${{ secrets.SMTP_USER }}
        export SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
        export SMTP_FROM=${{ secrets.SMTP_FROM }}
        export SMTP_TO=${{ secrets.SMTP_TO }}
        export SMTP_FROM_NAME="Playwright Test Monitor"
        export GF_SECURITY_ADMIN_USER=${{ secrets.GF_SECURITY_ADMIN_USER }}
        export GF_SECURITY_ADMIN_PASSWORD=${{ secrets.GF_SECURITY_ADMIN_PASSWORD }}
        export GF_SMTP_PASSWORD=${{ secrets.GF_SMTP_PASSWORD }}
        export ALERTMANAGER_EMAIL_PASSWORD=${{ secrets.ALERTMANAGER_EMAIL_PASSWORD }}
        export CI=1
        
        # Run tests with improved sharding options
        npx playwright test --shard=${{ matrix.shard }}/${{ strategy.job-total }} --workers=1
      timeout-minutes: 25
      
    - name: Generate Allure Report
      if: always()
      run: |
        # Install allure command line tool
        npm install -g allure-commandline
        
        # Generate the report from existing allure-results
        allure generate allure-results --clean -o allure-report
      timeout-minutes: 5
      
    - name: Check Prometheus targets
      if: always()
      run: curl -s http://localhost:9090/api/v1/targets | jq .
      timeout-minutes: 1
        
    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-shard-${{ matrix.shard }}
        path: |
          playwright-report/
          test-results/
          allure-report/
        retention-days: 5
        if-no-files-found: warn

    - name: Check test results
      if: steps.run-tests.outcome == 'failure'
      run: |
        exit 1

  merge-reports:
    if: always()
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download artifacts from all shards
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
          pattern: playwright-report-shard-*
          merge-multiple: true
      
      - name: Debug directory structure
        run: |
          echo "Directory structure of all-artifacts:"
          find all-artifacts -type f | sort
      
      - name: Prepare directories for report merging
        run: |
          # Create directories to hold report files
          mkdir -p playwright-report-to-merge
          mkdir -p merged-allure-results
          
          # Copy all HTML, JSON, and other report files from the playwright-report directories
          find all-artifacts -path "*/playwright-report/*" -type f -exec cp -v {} playwright-report-to-merge/ \;
          
          # If no files were copied, create an empty index.html to prevent the merge error
          if [ ! "$(ls -A playwright-report-to-merge)" ]; then
            echo "<html><body><p>No test results found</p></body></html>" > playwright-report-to-merge/index.html
            echo "Created placeholder file because no report files were found"
          fi
          
          # Copy all the allure-related JSON files to merged-allure-results directory
          find all-artifacts -path "*/allure-report/*" -type f -exec cp -v {} merged-allure-results/ \;
          
          echo "Contents of prepared directory for merging:"
          ls -la playwright-report-to-merge/
      
      - name: Merge reports
        run: |
          # Install playwright and report generators
          npx playwright install --with-deps
          npm install -g allure-commandline
          
          # Check if there are actual report files to merge
          if [ "$(find playwright-report-to-merge -name '*.html' -o -name '*.json' | wc -l)" -gt 1 ]; then
            # Merge Playwright HTML reports
            npx playwright merge-reports --config=playwright.config.ts playwright-report-to-merge
          else
            # Create a simple report if no real reports exist
            mkdir -p playwright-report
            echo "<html><body><h1>Test Report</h1><p>No test results were found to merge.</p></body></html>" > playwright-report/index.html
            echo "Created a simple report because no real reports were found"
          fi
          
          # Generate Allure report if results exist
          if [ "$(find merged-allure-results -type f | wc -l)" -gt 0 ]; then
            allure generate merged-allure-results --clean -o merged-allure-report
          else
            echo "No Allure report results found for merging"
            # Create a basic directory to prevent errors
            mkdir -p merged-allure-report
            echo "<html><body><h1>No Allure Reports</h1></body></html>" > merged-allure-report/index.html
          fi
      
      - uses: actions/upload-artifact@v4
        with:
          name: merged-playwright-report
          path: |
            playwright-report/
            merged-allure-report/
          retention-days: 5
      
      - name: Upload Allure Report to GitHub Pages
        if: github.ref == 'refs/heads/main' && hashFiles('merged-allure-report/**/*') != ''
        run: |
          # Configure Git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Create a fresh deployment branch
          git checkout --orphan gh-pages-temp
          
          # Clear working directory except for merged-allure-report
          find . -mindepth 1 -maxdepth 1 -not -name 'merged-allure-report' -not -name '.git' -exec rm -rf {} \;
          
          # Move allure-report content to root
          cp -r merged-allure-report/* .
          rm -rf merged-allure-report
          
          # Add files and commit
          git add .
          git commit -m "Deploy merged Allure report to GitHub Pages"
          
          # Force push to gh-pages
          git push origin gh-pages-temp:gh-pages --force
        timeout-minutes: 5
